package com.lsdconsulting.stub.integration.controller.post;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
import static java.lang.String.format;
import javax.annotation.processing.Generated;
import java.util.Locale;
import java.lang.annotation.Annotation;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static java.util.stream.Collectors.toList;
import static java.nio.charset.StandardCharsets.UTF_8;

@Generated("com.lsdconsulting.stub.plugin.ControllerProcessor")
public class JavaPostRestControllerStub {

    private static final String CONTENT_TYPE_HEADER_NAME = "Content-Type";
    private static final String CONTENT_TYPE_HEADER_VALUE = "application/json; charset=utf-8";
    private static final int OK = 200;
    private static final int ONCE = 1;
    private static final int NEVER = 0;

    private ObjectMapper objectMapper = new ObjectMapper();

    public JavaPostRestControllerStub(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public JavaPostRestControllerStub() {
    }


    public static final String RESOURCEWITHBODYANDANNOTATIONS_URL = "/postController/resourceWithBodyAndAnnotations";

    public void resourceWithBodyAndAnnotations(com.lsdconsulting.stub.integration.model.GreetingResponse response) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
        MappingBuilder mappingBuilder = post(urlPathEqualTo(url));
                                    stub(OK, buildBody(response), mappingBuilder);
            }

        public void resourceWithBodyAndAnnotations(com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest, com.lsdconsulting.stub.integration.model.GreetingResponse response) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
        MappingBuilder mappingBuilder = post(urlPathEqualTo(url)).withRequestBody(equalToJson(buildBody(greetingRequest)));
                                    stub(OK, buildBody(response), mappingBuilder);
            }
    
    public void resourceWithBodyAndAnnotations(int httpStatus, String response) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
                    MappingBuilder mappingBuilder = post(urlPathEqualTo(url));
                        stub(httpStatus, response, mappingBuilder);
            }

    public void verifyResourceWithBodyAndAnnotations(com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        verifyResourceWithBodyAndAnnotations(ONCE, greetingRequest);
    }

    public void verifyResourceWithBodyAndAnnotations(final int times, com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
        RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(url));
                                                                    requestPatternBuilder.withRequestBody(equalToJson(buildBody(greetingRequest)));
                        verify(times, requestPatternBuilder);
            }

        public void verifyResourceWithBodyAndAnnotations(final int times) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
        RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(url));
                                                    verify(times, requestPatternBuilder);
            }
    
    public void verifyResourceWithBodyAndAnnotationsNoInteraction(com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
        RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(url));
                                                                    requestPatternBuilder.withRequestBody(equalToJson(buildBody(greetingRequest)));
                        verify(NEVER, requestPatternBuilder);
            }

        public void verifyResourceWithBodyAndAnnotationsNoInteraction() {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONS_URL);
        verify(NEVER, postRequestedFor(urlPathEqualTo(url)));
    }
        public static final String RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL = "/postController/resourceWithBodyAndAnnotationsOnPathVariables/%s";

    public void resourceWithBodyAndAnnotationsOnPathVariables(com.lsdconsulting.stub.integration.model.GreetingResponse response, java.lang.String param) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
        MappingBuilder mappingBuilder = post(urlPathEqualTo(url));
                                    stub(OK, buildBody(response), mappingBuilder);
            }

        public void resourceWithBodyAndAnnotationsOnPathVariables(com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest, com.lsdconsulting.stub.integration.model.GreetingResponse response, java.lang.String param) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
        MappingBuilder mappingBuilder = post(urlPathEqualTo(url)).withRequestBody(equalToJson(buildBody(greetingRequest)));
                                    stub(OK, buildBody(response), mappingBuilder);
            }
    
    public void resourceWithBodyAndAnnotationsOnPathVariables(int httpStatus, String response, java.lang.String param) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
                    MappingBuilder mappingBuilder = post(urlPathEqualTo(url));
                        stub(httpStatus, response, mappingBuilder);
            }

    public void verifyResourceWithBodyAndAnnotationsOnPathVariables(java.lang.String param, com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        verifyResourceWithBodyAndAnnotationsOnPathVariables(ONCE, param, greetingRequest);
    }

    public void verifyResourceWithBodyAndAnnotationsOnPathVariables(final int times, java.lang.String param, com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
        RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(url));
                                                                    requestPatternBuilder.withRequestBody(equalToJson(buildBody(greetingRequest)));
                        verify(times, requestPatternBuilder);
            }

        public void verifyResourceWithBodyAndAnnotationsOnPathVariables(final int times, java.lang.String param) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
        RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(url));
                                                    verify(times, requestPatternBuilder);
            }
    
    public void verifyResourceWithBodyAndAnnotationsOnPathVariablesNoInteraction(java.lang.String param, com.lsdconsulting.stub.integration.model.GreetingRequest greetingRequest) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
        RequestPatternBuilder requestPatternBuilder = postRequestedFor(urlPathEqualTo(url));
                                                                    requestPatternBuilder.withRequestBody(equalToJson(buildBody(greetingRequest)));
                        verify(NEVER, requestPatternBuilder);
            }

        public void verifyResourceWithBodyAndAnnotationsOnPathVariablesNoInteraction(java.lang.String param) {
        String url = String.format(RESOURCEWITHBODYANDANNOTATIONSONPATHVARIABLES_URL, param );
        verify(NEVER, postRequestedFor(urlPathEqualTo(url)));
    }
    
    void stub(final int status, final String response, final MappingBuilder mappingBuilder) {
        stubFor(mappingBuilder
                .willReturn(
                        aResponse()
                                .withStatus(status)
                                .withBody(response)
                                .withHeader(CONTENT_TYPE_HEADER_NAME, CONTENT_TYPE_HEADER_VALUE)
                )
        );
    }

    String buildBody(final Object object) {
        try {
            return objectMapper.writeValueAsString(object);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

}





