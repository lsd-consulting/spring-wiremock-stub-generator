package com.lsdconsulting.stub.integration.controller.get;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.matching.RequestPatternBuilder;
import static java.lang.String.format;
import javax.annotation.processing.Generated;
import org.springframework.format.AnnotationFormatterFactory;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.Printer;
import java.util.List;
import java.util.Locale;
import java.lang.annotation.Annotation;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static java.util.stream.Collectors.toList;
import static java.nio.charset.StandardCharsets.UTF_8;

@Generated("com.lsdconsulting.stub.plugin.ControllerProcessor")
public class JavaGetRestControllerStub {

    private static final String CONTENT_TYPE_HEADER_NAME = "Content-Type";
    private static final String CONTENT_TYPE_HEADER_VALUE = "application/json; charset=utf-8";
    private static final int OK = 200;
    private static final int ONCE = 1;
    private static final int NEVER = 0;

    private ObjectMapper objectMapper = new ObjectMapper();
    private AnnotationFormatterFactory<DateTimeFormat> annotationFormatterFactory;

    public JavaGetRestControllerStub(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public JavaGetRestControllerStub() {
    }

    public JavaGetRestControllerStub(ObjectMapper objectMapper, AnnotationFormatterFactory<DateTimeFormat> annotationFormatterFactory) {
        this.objectMapper = objectMapper;
        this.annotationFormatterFactory = annotationFormatterFactory;
    }

    public static final String RESOURCEWITHPARAMANDANNOTATIONS_URL = "/getController/resourceWithParamAndAnnotations";
    
    public void resourceWithParamAndAnnotations(com.lsdconsulting.stub.integration.model.GreetingResponse response, java.lang.String param) {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
                    MappingBuilder mappingBuilder = get(urlPathEqualTo(url));
                        
                                                mappingBuilder.withQueryParam("param", equalTo(String.valueOf(param)));
                            
                        stub(OK, buildBody(response), mappingBuilder);
            }

    
    public void resourceWithParamAndAnnotations(int httpStatus, String response, java.lang.String param) {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
                    MappingBuilder mappingBuilder = get(urlPathEqualTo(url));
                    
                                                mappingBuilder.withQueryParam("param", equalTo(String.valueOf(param)));
                            
                        stub(httpStatus, response, mappingBuilder);
            }

    public void verifyResourceWithParamAndAnnotations(java.lang.String param) {
        verifyResourceWithParamAndAnnotations(ONCE, param);
    }

    public void verifyResourceWithParamAndAnnotations(final int times, java.lang.String param) {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
        RequestPatternBuilder requestPatternBuilder = getRequestedFor(urlPathEqualTo(url));
                                                    requestPatternBuilder.withQueryParam("param", equalTo(String.valueOf(param)));
                                                            verify(times, requestPatternBuilder);
    }

    
    public void verifyResourceWithParamAndAnnotationsNoInteraction(java.lang.String param) {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
        RequestPatternBuilder requestPatternBuilder = getRequestedFor(urlPathEqualTo(url));
                                                    requestPatternBuilder.withQueryParam("param", equalTo(String.valueOf(param)));
                                                            verify(NEVER, requestPatternBuilder);
    }

        public void verifyResourceWithParamAndAnnotationsNoInteraction() {
        String url = String.format(RESOURCEWITHPARAMANDANNOTATIONS_URL);
        verify(NEVER, getRequestedFor(urlPathEqualTo(url)));
    }
        public static final String RESOURCEWITHZONEDDATETIMEANDMULTIVALUE_URL = "/getController/resourceWithZonedDatetimeAndMultiValue";
    
    public void resourceWithZonedDatetimeAndMultiValue(com.lsdconsulting.stub.integration.model.GreetingResponse response, java.time.ZonedDateTime param, java.util.Set<java.lang.Integer> multiValue) {
        String url = String.format(RESOURCEWITHZONEDDATETIMEANDMULTIVALUE_URL);
                    MappingBuilder mappingBuilder = get(urlPathEqualTo(url));
                        
                                                mappingBuilder.withQueryParam("param", equalTo(serialise(param, "java.time.ZonedDateTime", "DATE_TIME", "", "SS", "")));
                            
                                                            mappingBuilder.withQueryParam("multiValue", havingExactly(multiValue.stream().map(x -> x.toString()).toArray(String[]::new)));
            
                        stub(OK, buildBody(response), mappingBuilder);
            }

    
    public void resourceWithZonedDatetimeAndMultiValue(int httpStatus, String response, java.time.ZonedDateTime param, java.util.Set<java.lang.Integer> multiValue) {
        String url = String.format(RESOURCEWITHZONEDDATETIMEANDMULTIVALUE_URL);
                    MappingBuilder mappingBuilder = get(urlPathEqualTo(url));
                    
                                                mappingBuilder.withQueryParam("param", equalTo(serialise(param, "java.time.ZonedDateTime", "DATE_TIME", "", "SS", "")));
                            
                                                            mappingBuilder.withQueryParam("multiValue", havingExactly(multiValue.stream().map(x -> x.toString()).toArray(String[]::new)));
            
                        stub(httpStatus, response, mappingBuilder);
            }

    public void verifyResourceWithZonedDatetimeAndMultiValue(java.time.ZonedDateTime param, java.util.Set<java.lang.Integer> multiValue) {
        verifyResourceWithZonedDatetimeAndMultiValue(ONCE, param, multiValue);
    }

    public void verifyResourceWithZonedDatetimeAndMultiValue(final int times, java.time.ZonedDateTime param, java.util.Set<java.lang.Integer> multiValue) {
        String url = String.format(RESOURCEWITHZONEDDATETIMEANDMULTIVALUE_URL);
        RequestPatternBuilder requestPatternBuilder = getRequestedFor(urlPathEqualTo(url));
                                                    requestPatternBuilder.withQueryParam("param", equalTo(serialise(param, "java.time.ZonedDateTime", "DATE_TIME", "", "SS", "")));
                                                                        requestPatternBuilder.withQueryParam("multiValue", havingExactly(multiValue.stream().map(x -> x.toString()).toArray(String[]::new)));
                                                            verify(times, requestPatternBuilder);
    }

    
    public void verifyResourceWithZonedDatetimeAndMultiValueNoInteraction(java.time.ZonedDateTime param, java.util.Set<java.lang.Integer> multiValue) {
        String url = String.format(RESOURCEWITHZONEDDATETIMEANDMULTIVALUE_URL);
        RequestPatternBuilder requestPatternBuilder = getRequestedFor(urlPathEqualTo(url));
                                                    requestPatternBuilder.withQueryParam("param", equalTo(serialise(param, "java.time.ZonedDateTime", "DATE_TIME", "", "SS", "")));
                                                                        requestPatternBuilder.withQueryParam("multiValue", havingExactly(multiValue.stream().map(x -> x.toString()).toArray(String[]::new)));
                                                            verify(NEVER, requestPatternBuilder);
    }

        public void verifyResourceWithZonedDatetimeAndMultiValueNoInteraction() {
        String url = String.format(RESOURCEWITHZONEDDATETIMEANDMULTIVALUE_URL);
        verify(NEVER, getRequestedFor(urlPathEqualTo(url)));
    }
    
    void stub(final int status, final String response, final MappingBuilder mappingBuilder) {
        stubFor(mappingBuilder
                .willReturn(
                        aResponse()
                                .withStatus(status)
                                .withBody(response)
                                .withHeader(CONTENT_TYPE_HEADER_NAME, CONTENT_TYPE_HEADER_VALUE)
                )
        );
    }

    String buildBody(final Object object) {
        try {
            return objectMapper.writeValueAsString(object);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @SuppressWarnings("unchecked")
    String serialise(Object object, String clazz, String iso, String pattern, String style, String...fallbackPatterns) {
        if (annotationFormatterFactory == null) {
            throw new IllegalStateException("annotationFormatterFactory not set");
        }

        DateTimeFormat dateTimeFormat= new DateTimeFormat() {

            @Override
            public Class<? extends Annotation> annotationType() {
                return null;
            }

            @Override
            public String style() {
                return style;
            }

            @Override
            public ISO iso() {
                return ISO.valueOf(iso);
            }

            @Override
            public String pattern() {
                return pattern;
            }

            @Override
            public String[] fallbackPatterns() {
                return fallbackPatterns;
            }
        };
        try {
            Printer printer = annotationFormatterFactory.getPrinter(
                                dateTimeFormat,
                                Class.forName(clazz)
                            );
            return printer.print(object, Locale.getDefault());
        } catch(ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public String joinWithFirstSeparator(String firstSep, String sep, List<String> strings) {
        if (strings.isEmpty()) return "";
        StringBuilder sb = new StringBuilder(strings.get(0));
        for (int i = 1; i < strings.size(); i++) {
            sb.append(i == 1 ? firstSep : sep).append(strings.get(i));
        }
        return sb.toString();
    }
}






