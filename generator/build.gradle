import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'org.springframework.boot' version '3.4.4' apply false
    id 'signing'
    id 'maven-publish'
    id 'jacoco'
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.spring" version "2.1.20"
}

description = "This is an annotation processor for Spring MVC @RestController annotation. It generates the Java code of the Wiremock stubs."

kotlin {
    jvmToolchain(17)
}

apply plugin: 'io.spring.dependency-management'
dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-reflect:2.1.20'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.20'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:2.1.20"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:2.1.20"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.1.20"

    implementation "io.pebbletemplates:pebble:3.2.4"
    implementation 'org.apache.commons:commons-text:1.13.1'

    implementation 'org.springframework:spring-web:6.2.5'
    implementation 'org.springframework:spring-context:6.2.5'


    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'
    testImplementation 'io.mockk:mockk-jvm:1.14.0'
    testImplementation 'org.mockito:mockito-core:5.17.0'
    testImplementation 'org.hamcrest:hamcrest:3.0'
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.lifecycle("Test results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)")
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("reports/coverage")
    }
    dependsOn test
}

java {
    withSourcesJar()
    withJavadocJar()
}

signing {
    if (project.findProperty("signingKey")) {
        logger.lifecycle("Signing the artifact")
        // Use in-memory ascii-armored keys
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    } else {
        logger.lifecycle("Not signing the artifact!!!")
        // Use signing properties in ~/.gradle/gradle.properties
        sign publishing.publications
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "${rootProject.name}"
            from components.java

            pom {
                name = '${rootProject.name}'
                description = rootProject.description
                url = 'https://github.com/lsd-consulting/spring-wiremock-stub-generator'
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        name = "Lukasz"
                        email = "lukasz.gryzbon@gmail.com"
                        organization = 'Integreety Ltd.'
                        organizationUrl = 'https://www.integreety.co.uk'
                    }
                    developer {
                        name = "Nick"
                        email = "nicholas.mcdowall@gmail.com"
                        organization = 'NKM IT Solutions'
                        organizationUrl = 'https://github.com/nickmcdowall'
                    }
                }
                scm {
                    url = "https://github.com/lsd-consulting/spring-wiremock-stub-generator.git"
                }
            }
        }
    }
}
